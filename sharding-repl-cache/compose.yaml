services:
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s


  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]


  #1-й шард с 3 репликами
  shard1-1:
    image: mongo:latest
    container_name: shard1-1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-2:
    image: mongo:latest
    container_name: shard1-2
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1-2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-3:
    image: mongo:latest
    container_name: shard1-3
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard1-3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард с 3 репликами
  shard2-1:
    image: mongo:latest
    container_name: shard2-1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-2:
    image: mongo:latest
    container_name: shard2-2
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    volumes:
      - shard2-2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-3:
    image: mongo:latest
    container_name: shard2-3
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2-3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  init-shards:
    image: mongo:latest
    depends_on:
      - configSrv
      - shard1-1
      - shard1-2
      - shard1-3
      - shard2-1
      - shard2-2
      - shard2-3
      - mongos_router
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    command: >
      bash -c "
        echo 'Waiting for MongoDB services to start...' &&
        sleep 30 &&
        echo 'Initializing config server...' &&
        mongosh --host configSrv:27017 --eval 'rs.initiate({_id:\"config_server\",configsvr:true,members:[{_id:0,host:\"configSrv:27017\"}]})' &&
        echo 'Waiting for config server initialization...' &&
        sleep 20 &&
        echo 'Initializing shard1 replica set...' &&
        mongosh --host shard1-1:27018 --eval 'rs.initiate({_id:\"shard1\",members:[{_id:0,host:\"shard1-1:27018\"},{_id:1,host:\"shard1-2:27021\"},{_id:2,host:\"shard1-3:27022\"}]})' &&
        echo 'Initializing shard2 replica set...' &&
        mongosh --host shard2-1:27019 --eval 'rs.initiate({_id:\"shard2\",members:[{_id:0,host:\"shard2-1:27019\"},{_id:1,host:\"shard2-2:27023\"},{_id:2,host:\"shard2-3:27024\"}]})' &&
        echo 'Waiting for shards initialization...' &&
        sleep 20 &&
        echo 'Adding shards to cluster...' &&
        mongosh --host mongos_router:27020 --eval 'sh.addShard(\"shard1/shard1-1:27018,shard1-2:27021,shard1-3:27022\")' &&
        sleep 10 &&
        mongosh --host mongos_router:27020 --eval 'sh.addShard(\"shard2/shard2-1:27019,shard2-2:27023,shard2-3:27024\")' &&
        echo 'Done!'
      "

  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    depends_on:
      - configSrv
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
      - configSrv
      - shard1-1
      - shard1-2
      - shard1-3
      - shard2-1
      - shard2-2
      - shard2-3
      - init-shards
      - redis
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020/?connectTimeoutMS=30000&serverSelectionTimeoutMS=30000"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  shard2-1-data:
  shard2-2-data:
  shard2-3-data:
  redis-data:
